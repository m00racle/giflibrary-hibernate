# ENTRY 5;
# ENTRY 5: PROPERTY CONFIGURATION
#   1.  This property file is a standard way to specify all sort of config in java and then use java code to load
#       these values into memory
#   2.  In general you will start with the property name followed equals sign then property value listed
#   3.  Using this properties files we can externalize values that might change and prevents us from having to weave
#       into our source code.
#   4.  First we build the hash.salt for the package to shorten the URL. We see this a lot with goo.gl sites URL
#       shortened. This salt is random Strings just copy paste from original if I may
#   5.  Then we determine where is our entities (models) of POJO will be located
#       NOTE: We need to make new package in the com.mooracle.giflib2 and name it model
#   6.  Then we need to define the data source and drivers
#   7.  Next we set the connection to server based database using the TCP protocol from the localhoest address. The
#       localhost can be seen in the top of the project structure (~/IdeaProjects/giflibrary-hibernate).
#       WARNING: MAKE SURE YOU MAKE A DIRECTORY NAMED data IN THE ROOT
#       We will name the database file as giflibh2 which we does not have to create inside the data directory. This
#       file will be created for us if it has not been exists when we fired up the database and connect to h2 database
#   8.  Set the database username and password. Both of these properties can be left blanks but WARNING: MAKE SURE
#   `   YOU USE THE SAME PASSWORD WHEN FIRING UP THE WEB CONSOLE USED HERE
#   9.  When using server based database we can simultaneously allow our application to use database as well as use
#       use web console that we referring to monitor the database separately. We have to use terminal in the root
#       directory to do this.
#       NOTE: BEFORE THAT WE NEED TO DOWNLOAD h2-1.4.196.jar from http://www.h2database.com/html/download.html
#           Then copy paste it into classpath (in this case in root of the project)
#       WARNING: IF YOU CHOOOSE FROM THAT WEBSITE TO DOWNLOAD DIRECTLY FROM MAVEN CHANCES ARE YOU WILL GET LATEST
#               BUT NOT STABLE RELEASE. TO GET THE STABLE RELEASE CHOOSE TO DOWNLOAD ALL INDEPENDENT PACKAGE AND
#               THEN EXTRACT THE .jar file form bin directory
#   NOTE: To fire up the database from terminal use this command:#the mantra to fired up the database from the terminal
##java -cp h2-1.4.196.jar org.h2.tools.Server
##provide with username and database you specified!
#   NEXT: ENTRY 6: FINISHING THE DATA CONFIG
#   GOTO: DataConfig.java for ENTRY 6!
#
#   PATCH: MODIFYING THE FILE SIZE LIMIT ON MULTIPART-FILE
#   1.  We go to /resources/app.properties file to add some configuration code
        #spring.servlet.multipart.max-file-size=128KB
        #spring.servlet.multipart.max-request-size=128KB
        #spring.http.multipart.enabled=false
#   2.  These (above) are the settings for Spring-boot 2.0 + for us who use Spring-boot 1.x.xxx we use:
    #spring.http.multipart.max-file-size=128KB
    #spring.http.multipart.max-request-size=128KB
##spring.http.multipart.enabled=false

#5-4: hash salt
giflibh2.hash.salt = xOBtdmJZxRcz^jkkyHfkrkT1*02bJUn+YQts0*xCeka%cGHCN1fjaC*faFtY

#5-5: define POJO package location:
giflibh2.entity.package = com.mooracle.giflibh2.model

#5-6: define driver
giflibh2.db.driver = org.h2.Driver

#5-7: set connection TCP and URL
giflibh2.db.url = jdbc:h2:tcp://localhost/~/IdeProject/giflibrary-hibernate/data/giflibh2

#5-8: username and password
giflibh2.db.username = sa
giflibh2.db.password =

#PATCH: MODIFYING THE FILE SIZE LIMIT ON MULTIPART-FILE
spring.http.multipart.max-file-size=10MB
spring.http.multipart.max-request-size=10MB
#spring.http.multipart.enabled=false